
import { useState } from 'react';
import { Service, ServiceCategory } from '@/hooks/doctors/types';
import { toast } from 'sonner';

// Updated categories to include all from the provided list
const mockCategories: ServiceCategory[] = [
  { id: '1', name: '–ê–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏', icon: 'üß™' },
  { id: '2', name: '–ê–Ω–∞–ª–∏–∑—ã –º–æ—á–∏', icon: 'üß™' },
  { id: '3', name: '–ë–∏–æ—Ö–∏–º–∏—è', icon: 'üß¨' },
  { id: '4', name: '–ì–æ—Ä–º–æ–Ω—ã', icon: '‚öóÔ∏è' },
  { id: '5', name: '–û–Ω–∫–æ–º–∞—Ä–∫–µ—Ä—ã', icon: 'üß´' },
  { id: '6', name: '–ò–º–º—É–Ω–æ–ª–æ–≥–∏—è', icon: 'üß´' },
  { id: '7', name: '–ì–∏–Ω–µ–∫–æ–ª–æ–≥–∏—è', icon: 'üë©‚Äç‚öïÔ∏è' },
  { id: '8', name: '–≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã', icon: '‚ö°' },
  { id: '9', name: '–ü–∞—Ä–∞–∑–∏—Ç–æ–ª–æ–≥–∏—è', icon: 'ü¶†' },
  { id: '10', name: '–£–ó–ò', icon: 'ü¶¥' }
];

export function useServicesData() {
  const [services, setServices] = useState<Service[]>([
    // –û–±—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏ –∏ –º–æ—á–∏
    {
      id: '1',
      name: '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ + –°–û–≠ (21 –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π)',
      category: '–ê–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏',
      price: 50000,
      durationMin: 30,
      doctors: ['doctor1', 'doctor2']
    },
    {
      id: '2',
      name: '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ—á–∏',
      category: '–ê–Ω–∞–ª–∏–∑—ã –º–æ—á–∏',
      price: 45000,
      durationMin: 30,
      doctors: ['doctor1']
    },
    {
      id: '3',
      name: '–ú–æ—á–∞ –ø–æ –ù–∏—á–µ–ø–æ—Ä–µ–Ω–∫–æ',
      category: '–ê–Ω–∞–ª–∏–∑—ã –º–æ—á–∏',
      price: 45000,
      durationMin: 30,
      doctors: ['doctor2']
    },
    {
      id: '4',
      name: '–ú–æ—á–∞ –ø–æ –ó–∏–º–Ω–∏—Ü–∫–æ–º—É',
      category: '–ê–Ω–∞–ª–∏–∑—ã –º–æ—á–∏',
      price: 45000,
      durationMin: 30,
      doctors: ['doctor1', 'doctor3']
    },
    {
      id: '5',
      name: '–°—É—Ç–æ—á–Ω–∞—è –º–æ—á–∞',
      category: '–ê–Ω–∞–ª–∏–∑—ã –º–æ—á–∏',
      price: 45000,
      durationMin: 30,
      doctors: ['doctor3']
    },
    {
      id: '6',
      name: '–°—É—Ç–æ—á–Ω–∞—è –º–æ—á–∞ –Ω–∞ —Å–∞—Ö–∞—Ä',
      category: '–ê–Ω–∞–ª–∏–∑—ã –º–æ—á–∏',
      price: 45000,
      durationMin: 30,
      doctors: ['doctor1']
    },
    {
      id: '7',
      name: '–ö–∞–ª—å –Ω–∞ —è–π—Ü–∞ –≥–ª–∏—Å—Ç',
      category: '–ü–∞—Ä–∞–∑–∏—Ç–æ–ª–æ–≥–∏—è',
      price: 62000,
      durationMin: 30,
      doctors: ['doctor2']
    },

    // –ë–∏–æ—Ö–∏–º–∏—è
    {
      id: '8',
      name: '–ì–ª—é–∫–æ–∑–∞ –Ω–∞—Ç–æ—â–∞–∫',
      category: '–ë–∏–æ—Ö–∏–º–∏—è',
      price: 34000,
      durationMin: 20,
      doctors: ['doctor1', 'doctor2']
    },
    {
      id: '9',
      name: '–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –æ–±—â–∏–π',
      category: '–ë–∏–æ—Ö–∏–º–∏—è',
      price: 50000,
      durationMin: 20,
      doctors: ['doctor1']
    },
    {
      id: '10',
      name: '–¢—Ä–∏–≥–ª–∏—Ü–µ—Ä–∏–¥—ã',
      category: '–ë–∏–æ—Ö–∏–º–∏—è',
      price: 50000,
      durationMin: 20,
      doctors: ['doctor2']
    },
    {
      id: '11',
      name: '–ö–∞–ª–∏–π',
      category: '–≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã',
      price: 45000,
      durationMin: 20,
      doctors: ['doctor1']
    },
    {
      id: '12',
      name: '–ù–∞—Ç—Ä–∏–π',
      category: '–≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã',
      price: 78000,
      durationMin: 20,
      doctors: ['doctor3']
    },
    {
      id: '13',
      name: '–ö–∞–ª—å—Ü–∏–π',
      category: '–≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã',
      price: 78000,
      durationMin: 20,
      doctors: ['doctor1']
    },
    {
      id: '14',
      name: '–ú–∞–≥–Ω–∏–π',
      category: '–≠–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã',
      price: 78000,
      durationMin: 20,
      doctors: ['doctor2']
    },
    {
      id: '15',
      name: '–ñ–µ–ª–µ–∑–æ',
      category: '–ë–∏–æ—Ö–∏–º–∏—è',
      price: 78000,
      durationMin: 20,
      doctors: ['doctor1']
    },
    
    // –ì–æ—Ä–º–æ–Ω—ã
    {
      id: '16',
      name: '–¢–¢–ì (—Ç–∏—Ä–µ–æ—Ç—Ä–æ–ø–Ω—ã–π –≥–æ—Ä–º–æ–Ω)',
      category: '–ì–æ—Ä–º–æ–Ω—ã',
      price: 90000,
      durationMin: 40,
      doctors: ['doctor1', 'doctor3']
    },
    {
      id: '17',
      name: '–¢3 —Å–≤–æ–±–æ–¥–Ω—ã–π',
      category: '–ì–æ—Ä–º–æ–Ω—ã',
      price: 95000,
      durationMin: 40,
      doctors: ['doctor3']
    },
    {
      id: '18',
      name: '–¢4 —Å–≤–æ–±–æ–¥–Ω—ã–π',
      category: '–ì–æ—Ä–º–æ–Ω—ã',
      price: 90000,
      durationMin: 40,
      doctors: ['doctor3']
    },
    {
      id: '19',
      name: '–ü—Ä–æ–ª–∞–∫—Ç–∏–Ω',
      category: '–ì–æ—Ä–º–æ–Ω—ã',
      price: 90000,
      durationMin: 40,
      doctors: ['doctor3']
    },
    {
      id: '20',
      name: '–¢–µ—Å—Ç–æ—Å—Ç–µ—Ä–æ–Ω',
      category: '–ì–æ—Ä–º–æ–Ω—ã',
      price: 90000,
      durationMin: 40,
      doctors: ['doctor3']
    },
    
    // –û–Ω–∫–æ–º–∞—Ä–∫–µ—Ä—ã
    {
      id: '21',
      name: '–†–∞–∫–æ–≤—ã–π —ç–º–±—Ä–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω—Ç–∏–≥–µ–Ω (CEA)',
      category: '–û–Ω–∫–æ–º–∞—Ä–∫–µ—Ä—ã',
      price: 84000,
      durationMin: 35,
      doctors: ['doctor1']
    },
    {
      id: '22',
      name: '–°–ê 15-3',
      category: '–û–Ω–∫–æ–º–∞—Ä–∫–µ—Ä—ã',
      price: 73000,
      durationMin: 35,
      doctors: ['doctor1']
    },
    {
      id: '23',
      name: '–°–ê 19-9',
      category: '–û–Ω–∫–æ–º–∞—Ä–∫–µ—Ä—ã',
      price: 84000,
      durationMin: 35,
      doctors: ['doctor1']
    },
    {
      id: '24',
      name: '–ü–°–ê –æ–±—â–∏–π',
      category: '–û–Ω–∫–æ–º–∞—Ä–∫–µ—Ä—ã',
      price: 123000,
      durationMin: 35,
      doctors: ['doctor1']
    },
    
    // –ò–º–º—É–Ω–æ–ª–æ–≥–∏—è
    {
      id: '25',
      name: '–í–ò–ß',
      category: '–ò–º–º—É–Ω–æ–ª–æ–≥–∏—è',
      price: 84000,
      durationMin: 30,
      doctors: ['doctor1', 'doctor2']
    },
    {
      id: '26',
      name: '–¶–∏—Ç–æ–º–µ–≥–∞–ª–æ–≤–∏—Ä—É—Å IgG',
      category: '–ò–º–º—É–Ω–æ–ª–æ–≥–∏—è',
      price: 73000,
      durationMin: 30,
      doctors: ['doctor2']
    },
    {
      id: '27',
      name: '–•–ª–∞–º–∏–¥–∏–æ–∑ IgG',
      category: '–ò–º–º—É–Ω–æ–ª–æ–≥–∏—è',
      price: 73000,
      durationMin: 30,
      doctors: ['doctor1']
    },
    
    // –ì–∏–Ω–µ–∫–æ–ª–æ–≥–∏—è
    {
      id: '28',
      name: '–¢–æ–∫—Å–æ–ø–ª–∞–∑–º–∞ IgG',
      category: '–ì–∏–Ω–µ–∫–æ–ª–æ–≥–∏—è',
      price: 73000,
      durationMin: 45,
      doctors: ['doctor3']
    },
    {
      id: '29',
      name: '–ú–∞–∑–æ–∫',
      category: '–ì–∏–Ω–µ–∫–æ–ª–æ–≥–∏—è',
      price: 62000,
      durationMin: 20,
      doctors: ['doctor3']
    },
    {
      id: '30',
      name: '–ü–ê–ü-—Ç–µ—Å—Ç',
      category: '–ì–∏–Ω–µ–∫–æ–ª–æ–≥–∏—è',
      price: 246000,
      durationMin: 60,
      doctors: ['doctor3']
    },
    
    // –£–ó–ò
    {
      id: '31',
      name: '–£–ó–ò —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã',
      category: '–£–ó–ò',
      price: 90000,
      durationMin: 30,
      doctors: ['doctor5']
    }
  ]);

  const addService = async (serviceData: Omit<Service, 'id'>) => {
    const newService: Service = {
      ...serviceData,
      id: Date.now().toString()
    };
    
    setServices(prev => [...prev, newService]);
    toast.success('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    return newService;
  };

  const updateService = async (serviceId: string, updatedService: Partial<Service>) => {
    setServices(prev => 
      prev.map(service => 
        service.id === serviceId 
          ? { ...service, ...updatedService } 
          : service
      )
    );
    toast.success('–£—Å–ª—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    return services.find(s => s.id === serviceId) as Service;
  };

  const deleteService = async (serviceId: string) => {
    setServices(prev => prev.filter(service => service.id !== serviceId));
    toast.success('–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞');
  };

  // Helper method to get services grouped by category
  const getServicesByCategory = () => {
    const servicesByCategory: Record<string, Service[]> = {};
    
    services.forEach(service => {
      if (!servicesByCategory[service.category]) {
        servicesByCategory[service.category] = [];
      }
      servicesByCategory[service.category].push(service);
    });
    
    return Object.entries(servicesByCategory).map(([category, services]) => ({
      category,
      icon: mockCategories.find(c => c.name === category)?.icon || 'üè•',
      services
    }));
  };

  return {
    services,
    categories: mockCategories,
    addService,
    updateService,
    deleteService,
    getServicesByCategory
  };
}
